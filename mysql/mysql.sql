-- Exported from QuickDBD: https://www.quickdatabasediagrams.com/
-- Link to schema: https://app.quickdatabasediagrams.com/#/d/zZyNVK
-- NOTE! If you have used non-SQL datatypes in your design, you will have to change these here.


CREATE TABLE `user` (
    -- unique user id
    `user_id` int  NOT NULL ,
    -- name of user
    `user_name` text  NOT NULL ,
    -- birthday of user
    `birthday` CHAR(10)  NOT NULL ,
    -- gender of user
    `gender` text  NOT NULL ,
    -- user mail address
    `email_addr` text  NOT NULL ,
    -- real address
    `address` text  NOT NULL ,
    -- password(hashed) for user
    `password` text  NOT NULL ,
    -- number of reservation cancels which are vicious
    `num_vicious_cancels` int  NOT NULL ,
    PRIMARY KEY (
        `user_id`
    )
);

CREATE TABLE `restaurant` (
    -- unique restaurant ID
    `restaurant_id` int  NOT NULL ,
    -- name of restaurant
    `restaurant_name` text  NOT NULL ,
    -- password(hashed) for admin
    `password` text  NOT NULL ,
    -- restaurant email address
    `email_addr` text  NOT NULL ,
    -- restaurant real address
    `address` text  NOT NULL ,
    -- time of opening, HH:MM
    `time_open` CHAR(10)  NOT NULL ,
    -- time of closing, HH:MM
    `time_close` CHAR(10)  NOT NULL ,
    -- day of holidays, YYYY/MM/DD, represented in json
    `holidays_json` text  NOT NULL ,
    -- feature of restaurant.
    `features` text  NOT NULL ,
    PRIMARY KEY (
        `restaurant_id`
    )
);

CREATE TABLE `seat` (
    -- unique seat id
    `seat_id` int  NOT NULL ,
    -- seat identifier which is used in the restaurant
    `seat_name` text  NOT NULL ,
    `restaurant_id` int  NOT NULL ,
    -- number of people who can sit in the seat
    `capacity` int  NOT NULL ,
    -- the seat is filled or not. if 1-9: filled, 0: not filled.
    `is_filled` tinyint(1)  NOT NULL ,
    -- if isFilled==true, this is start time(timestamp) of filled, if isFilled==false, this = 0
    `time_start` int  NOT NULL ,
    -- store time to stayed time, for calc avg_stay_time, represented in json
    `staying_times_json` text  NOT NULL ,
    -- time of average staying time on the seat, HH:MM:SS
    `avg_stay_time` CHAR(8)  NOT NULL ,
    -- feature of the seat
    `feature` text  NOT NULL ,
    PRIMARY KEY (
        `seat_id`
    )
);

CREATE TABLE `restaurant_evaluation` (
    -- unique ID of evaluation
    `evaluation_id` int  NOT NULL ,
    `restaurant_id` int  NOT NULL ,
    `user_id` int  NOT NULL ,
    -- evaluation grade, represented in 1-5
    `evaluation_grade` int  NOT NULL ,
    -- evaluation comment
    `evaluation_comment` text  NOT NULL ,
    PRIMARY KEY (
        `evaluation_id`
    )
);

CREATE TABLE `reservation` (
    -- unique ID of reservation
    `reservation_id` int  NOT NULL ,
    `restaurant_id` int  NOT NULL ,
    `user_id` int  NOT NULL ,
    `seat_id` int  NOT NULL ,
    -- start time to reserve seats, timestamp
    `time_start` int  NOT NULL ,
    -- end time to reserve seats, timestamp
    `time_end` int  NOT NULL ,
    -- number of people to go restaurant
    `num_people` int  NOT NULL ,
    -- the reservation is expired or not, if 1-9: expired, 0 -> active
    `is_expired` tinyint(1)  NOT NULL ,
    PRIMARY KEY (
        `reservation_id`
    )
);

CREATE TABLE `administrator` (
    -- unique ID of admin
    `admin_id` int  NOT NULL ,
    -- name of admin
    `admin_name` text  NOT NULL ,
    -- birthday of admin
    `birthday` CHAR(10)  NOT NULL ,
    -- password(hashed) for admin
    `password` text  NOT NULL ,
    -- gender of admin
    `gender` text  NOT NULL ,
    -- address of admin
    `address` text  NOT NULL ,
    -- email addr
    `email_addr` text  NOT NULL ,
    PRIMARY KEY (
        `admin_id`
    )
);

CREATE TABLE `auth_token` (
    -- token ID, generated by UUID
    `token_id` CHAR(36)  NOT NULL ,
    -- owner id of token, user_id or restaurant_id or admin_id
    `token_issuer_id` int  NOT NULL ,
    -- permission of token, "user", "restaurant" or "admin"
    `token_permission` text  NOT NULL ,
    -- time of expiry, represented in unix timestamp
    `expiry` int  NOT NULL ,
    PRIMARY KEY (
        `token_id`
    )
);

ALTER TABLE `seat` ADD CONSTRAINT `fk_seat_restaurant_id` FOREIGN KEY(`restaurant_id`)
REFERENCES `restaurant` (`restaurant_id`);

ALTER TABLE `restaurant_evaluation` ADD CONSTRAINT `fk_restaurant_evaluation_restaurant_id` FOREIGN KEY(`restaurant_id`)
REFERENCES `restaurant` (`restaurant_id`);

ALTER TABLE `restaurant_evaluation` ADD CONSTRAINT `fk_restaurant_evaluation_user_id` FOREIGN KEY(`user_id`)
REFERENCES `user` (`user_id`);

ALTER TABLE `reservation` ADD CONSTRAINT `fk_reservation_restaurant_id` FOREIGN KEY(`restaurant_id`)
REFERENCES `restaurant` (`restaurant_id`);

ALTER TABLE `reservation` ADD CONSTRAINT `fk_reservation_user_id` FOREIGN KEY(`user_id`)
REFERENCES `user` (`user_id`);

ALTER TABLE `reservation` ADD CONSTRAINT `fk_reservation_seat_id` FOREIGN KEY(`seat_id`)
REFERENCES `seat` (`seat_id`);

